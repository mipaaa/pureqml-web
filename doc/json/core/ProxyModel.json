{
	"name": "core.ProxyModel",

	"content": {
		"Properties": {
			"count": { "text": "rows count property", "internal": false, "type": "int" },
			"target": { "text": "target model object", "internal": false, "type": "Object" }
		},

		"Signals": {
			"reset": { "text": "emitted when model is reset", "internal": false },
			"rowsInserted": { "text": "emitted when row is inserted", "internal": false },
			"rowsChanged": { "text": "emitted when row is changed", "internal": false },
			"rowsRemoved": { "text": "emitted when row is removed", "internal": false }
		},

		"Methods": {
			"setFilter": { "text": "this method set target model rows filter function, 'filter' function must return boolean value, 'true' - when row must be displayed, 'false' otherwise", "internal": false },
			"setCompare": { "text": "this method set a comparison function, target model rows are sorted in ascending order according to a comparison function 'cmp'", "internal": false },
			"_buildIndexMap": { "text": "@private", "internal": true },
			"get": { "text": "returns a model's row by index, throw exception if index is out of range or if requested row is non-object", "internal": false },
			"clear": { "text": "remove all rows", "internal": false },
			"append": { "text": "append row to the model", "internal": false },
			"insert": { "text": "place row at requested index, throws exception when index is out of range", "internal": false },
			"set": { "text": "replace row at 'idx' position by 'row' argument, throws exception if index is out of range or if 'row' isn't Object", "internal": false },
			"setProperty": { "text": "replace a row's property, throws exception if index is out of range or if 'row' isn't Object", "internal": false },
			"remove": { "text": "remove rows from model from 'idx' to 'idx' + 'n' position", "internal": false },
			"addChild": { "text": "this method is alias for 'append' method", "internal": false },
			"_onReset": { "text": "@private", "internal": true },
			"_onRowsInserted": { "text": "@private", "internal": true },
			"_onRowsChanged": { "text": "@private", "internal": true },
			"_onRowsRemoved": { "text": "@private", "internal": true },
			"onCompleted": { "text": "@private", "internal": true }
		}
	}
}