{
	"name": "core.Item",

	"content": {
		"Properties": {
			"x": { "text": "x coordinate", "internal": false, "type": "int", "defaultValue": "" },
			"y": { "text": "y coordinate", "internal": false, "type": "int", "defaultValue": "" },
			"z": { "text": "z coordinate", "internal": false, "type": "int", "defaultValue": "" },
			"width": { "text": "width of visible area", "internal": false, "type": "int", "defaultValue": "" },
			"height": { "text": "height of visible area", "internal": false, "type": "int", "defaultValue": "" },
			"clip": { "text": "clip all children outside rectangular area defined by x, y, width, height", "internal": false, "type": "bool", "defaultValue": "" },
			"radius": { "text": "round corner radius", "internal": false, "type": "real", "defaultValue": "" },
			"focus": { "text": "this item can be focused", "internal": false, "type": "bool", "defaultValue": "" },
			"focused": { "text": "this item is focused among its siblings", "internal": false, "type": "bool", "defaultValue": "this._get('focusedChild') === this" },
			"activeFocus": { "text": "this item can receive events and really focused at this moment", "internal": false, "type": "bool", "defaultValue": "" },
			"focusedChild": { "text": "current focused item (this item only)", "internal": false, "type": "Item", "defaultValue": "" },
			"visible": { "text": "this item and its children are visible", "internal": false, "type": "bool", "defaultValue": "true" },
			"visibleInView": { "text": "this item is visible inside view content area", "internal": false, "type": "bool", "defaultValue": "true" },
			"recursiveVisible": { "text": "this item is actually visible on screen (all parents are visible as well)", "internal": false, "type": "bool", "defaultValue": "true" },
			"opacity": { "text": "opacity of the item", "internal": false, "type": "real", "defaultValue": "1" },
			"anchors": { "text": "", "ref": "core/Anchors", "internal": false, "type": "Anchors", "defaultValue": "Anchors" },
			"effects": { "text": "", "ref": "core/Effects", "internal": false, "type": "Effects", "defaultValue": "Effects" },
			"transform": { "text": "", "ref": "core/Transform", "internal": false, "type": "Transform", "defaultValue": "Transform" },
			"left": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"top": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"right": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"bottom": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"horizontalCenter": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"verticalCenter": { "text": "", "ref": "core/AnchorLine", "internal": false, "type": "AnchorLine", "defaultValue": "AnchorLine" },
			"viewX": { "text": "x position in view (if any)", "internal": false, "type": "int", "defaultValue": "" },
			"viewY": { "text": "y position in view (if any)", "internal": false, "type": "int", "defaultValue": "" }
		},

		"Signals": {
			"boxChanged": { "text": "emitted when position or size changed", "internal": false }
		},

		"Methods": {
			"discard": { "text": "", "internal": false },
			"getTag": { "text": "returns tag for corresponding element", "params": [], "internal": false },
			"registerStyle": { "text": "", "internal": false },
			"createElement": { "text": "default implementation of element creation routine.", "params": [], "internal": false },
			"toScreen": { "text": "map relative component coordinates to absolute screen ones", "params": [], "internal": false },
			"_updateAnimation": { "text": "tries to set animation on name using css transitions, returns true on success", "params": [], "internal": false },
			"setAnimation": { "text": "sets animation on given property", "params": [], "internal": false },
			"style": { "text": "passes style (or styles { a:, b:, c: ... }) to underlying element", "params": [], "internal": false },
			"addChild": { "text": "adds child, focus it if child accepts focus", "params": [], "internal": false },
			"_mapCSSAttribute": { "text": "returns css rule by property name", "params": [], "internal": false },
			"_update": { "text": "@private", "params": [], "internal": true },
			"_updateVisibility": { "text": "updates recursive visibility status", "params": [], "internal": false },
			"forceActiveFocus": { "text": "sets current global focus to component", "params": [], "internal": false },
			"_tryFocus": { "text": "tries to focus children or item itself", "params": [], "internal": false },
			"_propagateFocusToParents": { "text": "propagates focus to parent, if not set there", "params": [], "internal": false },
			"hasActiveFocus": { "text": "returns status of global focus", "params": [], "internal": false },
			"_focusTree": { "text": "@private focus subtree of current focused child", "params": [], "internal": true },
			"_focusChild": { "text": "", "internal": false },
			"focusChild": { "text": "", "internal": false },
			"setTransition": { "text": "", "internal": false },
			"_updateStyle": { "text": "", "internal": false },
			"_processKey": { "text": "", "internal": false },
			"onVisibleChanged": { "text": "", "internal": false },
			"onVisibleInViewChanged": { "text": "", "internal": false },
			"setFocus": { "text": "", "internal": false }
		}
	}
}